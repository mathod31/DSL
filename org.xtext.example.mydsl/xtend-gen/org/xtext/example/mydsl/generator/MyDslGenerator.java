/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import sample.FSM;
import sample.Finalstate;
import sample.Initstate;
import sample.State;
import sample.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFsm = ((FSM) _get);
    fsa.generateFile("main.java", this.contentMain(myFsm));
    String _name = myFsm.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.contentFSM(myFsm.getName()));
    fsa.generateFile("State.java", this.contentAbstractState("State"));
    fsa.generateFile("Initstate.java", this.contentExtendState("Initstate"));
    fsa.generateFile("Finalstate.java", this.contentExtendState("Finalstate"));
    EList<State> _state = myFsm.getState();
    for (final State state : _state) {
      if (((!(state instanceof Finalstate)) && (!(state instanceof Initstate)))) {
        String _name_1 = state.getName();
        String _plus_1 = (_name_1 + ".java");
        fsa.generateFile(_plus_1, this.contentExtendState(state.getName()));
      }
    }
  }
  
  public CharSequence contentFSM(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    _builder.append(name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Initstate initstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Finalstate finalstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("State currentState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    _builder.append(name, "    ");
    _builder.append("(String name, Initstate initstate, Finalstate finalState) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.initstate = initstate;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.finalstate = finalState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setName(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Initstate getInitstate() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return initstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setInitstate(Initstate initstate) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.initstate = initstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Finalstate getFinalstate() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return finalstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setFinalstate(Finalstate finalstate) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.finalstate = finalstate;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public State getCurrentState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return currentState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentState(State currentState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentState = currentState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentAbstractState(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class ");
    _builder.append(name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public ");
    _builder.append(name, "\t    ");
    _builder.append("(String name) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() { return name;}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentExtendState(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    _builder.append(name);
    _builder.append(" extends State {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(name, "\t");
    _builder.append(" (String name){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("super(name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentMain(final FSM fsm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class main {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void main (String[] args){");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<State> _state = fsm.getState();
      for(final State s : _state) {
        {
          if ((s instanceof Initstate)) {
            _builder.append("\t\t");
            _builder.append("Initstate initstate = new Initstate(\"");
            String _name = ((Initstate)s).getName();
            _builder.append(_name, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((s instanceof Finalstate)) {
              _builder.append("\t\t");
              _builder.append("Finalstate finalState = new Finalstate(\"");
              String _name_1 = ((Finalstate)s).getName();
              _builder.append(_name_1, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t");
              _builder.append("State ");
              String _name_2 = s.getName();
              _builder.append(_name_2, "\t\t");
              _builder.append(" = new ");
              String _name_3 = s.getName();
              _builder.append(_name_3, "\t\t");
              _builder.append("(\"");
              String _name_4 = s.getName();
              _builder.append(_name_4, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_5 = fsm.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" dsl = new ");
    String _name_6 = fsm.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append("(\"");
    String _name_7 = fsm.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("\", initstate, finalState);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("dsl.setCurrentState(initstate);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Start with state : \" + dsl.getCurrentState().getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (!(dsl.getCurrentState() instanceof Finalstate)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Scanner sc = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Saisir un trigger :\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String input = sc.nextLine();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch(dsl.getCurrentState().getName()) {");
    _builder.newLine();
    {
      EList<Transition> _transition = fsm.getTransition();
      for(final Transition tr : _transition) {
        _builder.append("\t\t\t ");
        _builder.append("case \"");
        String _name_8 = tr.getStateFrom().getName();
        _builder.append(_name_8, "\t\t\t ");
        _builder.append("\" :");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t ");
        _builder.append("\t");
        _builder.append("if (input.equals(\"");
        String _trigger = tr.getTrigger();
        _builder.append(_trigger, "\t\t\t \t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        {
          State _stateTo = tr.getStateTo();
          if ((_stateTo instanceof Finalstate)) {
            _builder.append("\t\t\t\t\t ");
            _builder.append("dsl.setCurrentState(finalState);");
            _builder.newLine();
          } else {
            _builder.append("\t\t\t\t\t ");
            _builder.append("dsl.setCurrentState(");
            String _name_9 = tr.getStateTo().getName();
            _builder.append(_name_9, "\t\t\t\t\t ");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t\t\t ");
        _builder.append("}\t");
        _builder.newLine();
        _builder.append("\t\t\t\t\t ");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Next state : \" + dsl.getCurrentState().getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("System.out.println(\"Finish with state : \" + dsl.getCurrentState().getName());");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
