/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFSMAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFSMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cInitstateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateInitstateParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Keyword cFinalstateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStateFinalstateParserRuleCall_6_0 = (RuleCall)cStateAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cStateKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cStateAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_7_0_1_0 = (RuleCall)cStateAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_2_0 = (Keyword)cGroup_7_0_2.eContents().get(0);
		private final Assignment cStateAssignment_7_0_2_1 = (Assignment)cGroup_7_0_2.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_7_0_2_1_0 = (RuleCall)cStateAssignment_7_0_2_1.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cTransitionKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cTransitionAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_7_1_1_0 = (RuleCall)cTransitionAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_1_2 = (Group)cGroup_7_1.eContents().get(2);
		private final Keyword cCommaKeyword_7_1_2_0 = (Keyword)cGroup_7_1_2.eContents().get(0);
		private final Assignment cTransitionAssignment_7_1_2_1 = (Assignment)cGroup_7_1_2.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_7_1_2_1_0 = (RuleCall)cTransitionAssignment_7_1_2_1.eContents().get(0);
		
		//FSM:
		//	{FSM}
		//	'FSM'
		//	name=EString
		//	'initstate' state+=Initstate
		//	'finalstate' state+=Finalstate ('state' state+=State ("," state+=State)* |
		//	'transition' transition+=Transition ("," transition+=Transition)*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FSM} 'FSM' name=EString 'initstate' state+=Initstate 'finalstate' state+=Finalstate ('state' state+=State (","
		//state+=State)* | 'transition' transition+=Transition ("," transition+=Transition)*)*
		public Group getGroup() { return cGroup; }
		
		//{FSM}
		public Action getFSMAction_0() { return cFSMAction_0; }
		
		//'FSM'
		public Keyword getFSMKeyword_1() { return cFSMKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'initstate'
		public Keyword getInitstateKeyword_3() { return cInitstateKeyword_3; }
		
		//state+=Initstate
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//Initstate
		public RuleCall getStateInitstateParserRuleCall_4_0() { return cStateInitstateParserRuleCall_4_0; }
		
		//'finalstate'
		public Keyword getFinalstateKeyword_5() { return cFinalstateKeyword_5; }
		
		//state+=Finalstate
		public Assignment getStateAssignment_6() { return cStateAssignment_6; }
		
		//Finalstate
		public RuleCall getStateFinalstateParserRuleCall_6_0() { return cStateFinalstateParserRuleCall_6_0; }
		
		//('state' state+=State ("," state+=State)* | 'transition' transition+=Transition ("," transition+=Transition)*)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'state' state+=State ("," state+=State)*
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'state'
		public Keyword getStateKeyword_7_0_0() { return cStateKeyword_7_0_0; }
		
		//state+=State
		public Assignment getStateAssignment_7_0_1() { return cStateAssignment_7_0_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_7_0_1_0() { return cStateStateParserRuleCall_7_0_1_0; }
		
		//("," state+=State)*
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }
		
		//","
		public Keyword getCommaKeyword_7_0_2_0() { return cCommaKeyword_7_0_2_0; }
		
		//state+=State
		public Assignment getStateAssignment_7_0_2_1() { return cStateAssignment_7_0_2_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_7_0_2_1_0() { return cStateStateParserRuleCall_7_0_2_1_0; }
		
		//'transition' transition+=Transition ("," transition+=Transition)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'transition'
		public Keyword getTransitionKeyword_7_1_0() { return cTransitionKeyword_7_1_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_7_1_1() { return cTransitionAssignment_7_1_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_7_1_1_0() { return cTransitionTransitionParserRuleCall_7_1_1_0; }
		
		//("," transition+=Transition)*
		public Group getGroup_7_1_2() { return cGroup_7_1_2; }
		
		//","
		public Keyword getCommaKeyword_7_1_2_0() { return cCommaKeyword_7_1_2_0; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_7_1_2_1() { return cTransitionAssignment_7_1_2_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_7_1_2_1_0() { return cTransitionTransitionParserRuleCall_7_1_2_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStateFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateFromStateCrossReference_2_0 = (CrossReference)cStateFromAssignment_2.eContents().get(0);
		private final RuleCall cStateFromStateEStringParserRuleCall_2_0_1 = (RuleCall)cStateFromStateCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStateToStateCrossReference_4_0 = (CrossReference)cStateToAssignment_4.eContents().get(0);
		private final RuleCall cStateToStateEStringParserRuleCall_4_0_1 = (RuleCall)cStateToStateCrossReference_4_0.eContents().get(1);
		private final Keyword cTriggerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTriggerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggerEStringParserRuleCall_6_0 = (RuleCall)cTriggerAssignment_6.eContents().get(0);
		
		//Transition:
		//	{Transition} name=EString
		//	stateFrom=[State|EString]
		//	"->"
		//	StateTo=[State|EString]
		//	": trigger:" trigger=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition} name=EString stateFrom=[State|EString] "->" StateTo=[State|EString] ": trigger:" trigger=EString
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//stateFrom=[State|EString]
		public Assignment getStateFromAssignment_2() { return cStateFromAssignment_2; }
		
		//[State|EString]
		public CrossReference getStateFromStateCrossReference_2_0() { return cStateFromStateCrossReference_2_0; }
		
		//EString
		public RuleCall getStateFromStateEStringParserRuleCall_2_0_1() { return cStateFromStateEStringParserRuleCall_2_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//StateTo=[State|EString]
		public Assignment getStateToAssignment_4() { return cStateToAssignment_4; }
		
		//[State|EString]
		public CrossReference getStateToStateCrossReference_4_0() { return cStateToStateCrossReference_4_0; }
		
		//EString
		public RuleCall getStateToStateEStringParserRuleCall_4_0_1() { return cStateToStateEStringParserRuleCall_4_0_1; }
		
		//": trigger:"
		public Keyword getTriggerKeyword_5() { return cTriggerKeyword_5; }
		
		//trigger=EString
		public Assignment getTriggerAssignment_6() { return cTriggerAssignment_6; }
		
		//EString
		public RuleCall getTriggerEStringParserRuleCall_6_0() { return cTriggerEStringParserRuleCall_6_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//State:
		//	{State} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} name=EString
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//String0 type::String:
		//	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class InitstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Initstate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitstateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Initstate:
		//	{Initstate} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Initstate} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Initstate}
		public Action getInitstateAction_0() { return cInitstateAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class FinalstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Finalstate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalstateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Finalstate:
		//	{Finalstate} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Finalstate} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Finalstate}
		public Action getFinalstateAction_0() { return cFinalstateAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	
	
	private final FSMElements pFSM;
	private final EStringElements pEString;
	private final TransitionElements pTransition;
	private final StateElements pState;
	private final String0Elements pString0;
	private final InitstateElements pInitstate;
	private final FinalstateElements pFinalstate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFSM = new FSMElements();
		this.pEString = new EStringElements();
		this.pTransition = new TransitionElements();
		this.pState = new StateElements();
		this.pString0 = new String0Elements();
		this.pInitstate = new InitstateElements();
		this.pFinalstate = new FinalstateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FSM:
	//	{FSM}
	//	'FSM'
	//	name=EString
	//	'initstate' state+=Initstate
	//	'finalstate' state+=Finalstate ('state' state+=State ("," state+=State)* |
	//	'transition' transition+=Transition ("," transition+=Transition)*)*;
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Transition:
	//	{Transition} name=EString
	//	stateFrom=[State|EString]
	//	"->"
	//	StateTo=[State|EString]
	//	": trigger:" trigger=EString;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//State:
	//	{State} name=EString;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//String0 type::String:
	//	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//Initstate:
	//	{Initstate} name=EString;
	public InitstateElements getInitstateAccess() {
		return pInitstate;
	}
	
	public ParserRule getInitstateRule() {
		return getInitstateAccess().getRule();
	}
	
	//Finalstate:
	//	{Finalstate} name=EString;
	public FinalstateElements getFinalstateAccess() {
		return pFinalstate;
	}
	
	public ParserRule getFinalstateRule() {
		return getFinalstateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
